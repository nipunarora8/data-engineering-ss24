// 1. This script outlines a pipeline from downloading a zip file from the web to creating an SQLite database with specified constraints as described in the exercise instructions.
// Each comment here details the steps involved in the process.
// 2. First, we establish the structure of the pipeline by referencing the utilized blocks.
// 3. Following the pipeline structure, we define the specific blocks used.
// 4. Next, we specify the URL of the zip file within the DataExtractor block.
// 5. We then select the file from the extracted zip archive (in this case, a CSV file).
// 6. We specify the delimiter used in the CSV file as (;).
// 7. We define the columns to be included in the Excel file.
// 8. We establish the schema for the SQLite table to be created.
// 9. We define the transformation function for converting Celsius to Fahrenheit.
// 10. We impose a constraint to ensure only positive IDs are included.
// 11. We enforce a constraint to ensure all integer values are positive.
// 12. Finally, we generate an SQLite file using the defined schema.

pipeline Pipeline {

    Extractor
        -> TempFilePicker
        -> TempTextFileInterpreter
        -> TempCSVInterpreter;

    TempCSVInterpreter
        -> TempCellWriter1
        -> TempCellWriter2
        -> TempTableInterpreter
        -> CelsiusToFahrenheitTransformer
        -> CelsiusToFahrenheitTransformer2
        -> TempSQLiteLoader;

    block Extractor oftype GTFSExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }
    
    block TempFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    block TempCSVInterpreter oftype CSVInterpreter { 
        delimiter: ";";
    }

    block TempTextFileInterpreter oftype TextFileInterpreter {
    }

    block TempCellWriter1 oftype CellWriter {
        at: range A1:E1;
        write: ['id','producer','model','month','temperature'];
    }

    block TempCellWriter2 oftype CellWriter {
        at: cell J1;
        write: ['battery_temperature'];
    }

    block TempTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [

            "id" oftype PositiveInteger,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal,
        ];
    }

    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: 32 + (9/5 * Celsius) ;
    }
    

    block CelsiusToFahrenheitTransformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
    }

    block CelsiusToFahrenheitTransformer2 oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheit;
    }

    valuetype PositiveInteger oftype integer {
        constraints: [
            OnlyValidNumbers,
        ];
    }
    
    constraint OnlyValidNumbers on integer:
        value >= 0;
    
    block TempSQLiteLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}

    


