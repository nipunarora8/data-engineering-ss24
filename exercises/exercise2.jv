// 1. This Jayvee model describes a pipeline to get data from CSV from the web and then making an SQLite file
// Steps are as follows
// 2. We define the pipeline structure by referencing the blocks used.
// 3. After the pipeline structure, we define all the blocks that are being used.
// 4.Then we are use the column names from the CSV file to define the schema of the SQLite table.
// The types of the columns are inferred from the data.
// 5. We delete the column E from the table as it is not required.
// 6. We define constraints on the stadtteil to ensure it is valid according to the schema.
// 7. We define constraints on the coordinates to ensure it is valid according to the schema.
// 8. This constraint ensures that the stadtteil is one of the valid values.For e.g, Furth-Mitte, Furth-Süd, Furth-Nord.
// 9. This constraint ensures that the coordinates are in the format of "x.x, y.y".

pipeline TreesPipeline {

    TreesHttpExtractor
        -> TreesTextFileInterpreter
        -> TreesCSVInterpreter
        -> TreesColumnDeleter;

    TreesColumnDeleter
        -> TreesTableInterpreter
        -> TreesSQLiteLoader;

    block TreesHttpExtractor oftype HttpExtractor {
        url: "https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv";
    }

    block TreesTextFileInterpreter oftype TextFileInterpreter { }

    block TreesCSVInterpreter oftype CSVInterpreter { 
        delimiter: ";";
    }

    block TreesTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [

            "lfd_nr" oftype integer,
            "stadtteil" oftype ValidCity,
            "standort" oftype text,
            "baumart_botanisch" oftype text,
            "baumart_deutsch" oftype text,
            "id" oftype ValidIds,
            "baumfamilie" oftype text,
        ];
    }

    block TreesColumnDeleter oftype ColumnDeleter {
        delete: [column E];
    }

    block TreesSQLiteLoader oftype SQLiteLoader {
        table: "trees";
        file: "./trees.sqlite";
    }
}

valuetype ValidCity oftype text {
    constraints: [
        OnlyCityList,
    ];
}

valuetype ValidIds oftype text {
    constraints: [
        OnlyValidIds,
    ];
}

constraint OnlyCityList on text:
    value in ["Furth-Mitte","Furth-Süd","Furth-Nord"];

constraint OnlyValidIds on text:
    value matches /^\d{1,3}\.\d+, \d{1,3}\.\d+$/;




